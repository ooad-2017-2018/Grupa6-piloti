1.Observer pattern
- Uloga Observer paterna je da uspostavi relaciju izmeðu objekata tako kada jedan objekat promijeni stanje, drugi zainteresirani objekti se obavjestavaju.Struktura ovog paterna se sastoji od:
Subject klase-instance ove klase mijenjaju svoje stanje, te sadrze privatni dogadaj Notify, ciji je delegate tipa Callback(naziv delegata kojeg deklarisemo takoder u Subject klasi), njegovim se iniciranjem obavjestavaju posmatraci, odnosono pozivaju se njihove metode Update.
Interfejsa IObserver-sadrzi samo jednu metodu koja se poziva pri pormijeni stanja neke Subject klase, tj. Update metode ciji prototip odgovara prototipu defnisanim delegatom Callback.
Observer klase-koja obezbjeduje implementaciju za IObserver interfejs, te u svom konstruktoru prima referencu na objekat tipa Subject klase i povezuje njegov atribut Notify sa svojom metodom Update(registrira se na taj Subject klasu i postaje njen posmatrac).
Update – metoda koja formira interfejs izmeðu klasa Subject i Observer.
Notify -Event mehanizam za pozivanje Update operacije za sve posmatraèe (Observers).
-U nasem projektu nije iskoristen ovaj patern, ali dobro mjesto za njegovu upotrebu bi bilo pri komunikaciji uprave i aviokompanija(kada aviokompanija posalje zahtjev za novu liniju, obavjestava se uprava ,te kada uprava odgovori obavjestava se aviokompanija), kao i pri komunikaciji uprave i kontrolora leta(kod slanja zahtjeva za odgodu leta od strane kontrolora leta i odgovora uprave).
2.Adapter pattern
-Adapter patern koristimo kada zelimo omoguciti siru upotrebu vec postojecih klasa, bez mijenjanja istih.Ovaj patern kreira novu adapter klasu koja sluzi kao posrednik izmedu originalne klase i zeljenog interfejsa.Struktura Adapter paterna se sastoji od: Client klase(koja saraduje sa drugim klasama preko Itarget interfejsa), zahtijevanog novog interfejsa Itarget, starog postojeceg interfejsa Adaptee, te klase Adapter koja implementira zahtijevani interfejs i prilagodava stari.
Postoje dvije osnovne vrste realizacija implementacije ovog paterna:Class Adapter patern(Adapter klasa nasljeduje klasu Adaptee, koristimo ako je primarni cilj da se pregazi Adaptee) i Object Adapter patern(Adapter klasa se implementira preko asocijacije/agregacije sa Adaptee klasom).
-Ovaj patern u nasem projektu bi mogli iskoristiti kod prikazivanja neke nove vrste analize podataka, ukoliko se ista ne razlikuje dosta od vec postojece.
3.State pattern
-State patern predstavlja dinamicku verziju Strategy paterna, u smislu da kod ovog paterna promjena stanja izaziva drugacije ponasanje.Postize se promjenom podklase unutar hijerarhije klasa, a struktura mu se sastoji od:Client klase (koja komunicira sa Context klasom), Context klase(koja odrzava instancu stanja koja definira tekuci kontekst i interfejs),Istate interfejsa(koji definise ponasanje povezano sa svim mogucim stanjima klijenta),klasa stanja(koje implementiraju po jedno konkretno stanje objekta Context klase).
-Ovaj patern u nasem projektu bi mogli iskoristiti pri pozivanju web servisa, gdje se u slucaju da od nekog servisa iz nekog razloga ne mozemo dobiti odgovor, mijenja stanje Contexta i poziva drugi servis(koji nudi istu vrstu informacija).
